DISABLE_AUTO_TITLE="true"

################################################################################
# SETTINGS
################################################################################
set-option -g default-shell    $SHELL
set-option -g default-terminal "screen-256color"

set-option -gs escape-time     1
set-option -g  repeat-time     300
set-option -g  visual-activity on
set-option -g  history-limit   100000

set-option -g base-index      1
set-option -g renumber-window on
set-option -g mouse           on

# set-option -g set-titles on
# set-option -g set-titles-string "#S ❐ #I:#W ● #T"

set-option -g status          on
set-option -g status-utf8     on
set-option -g status-interval 20
set-option -g status-justify  centre

set-window-option -g aggressive-resize on
set-window-option -g monitor-activity  on
set-window-option -g xterm-keys        on
set-window-option -g mode-keys         vi
set-window-option -g pane-base-index   1

################################################################################
# STATUS LINE
################################################################################
set-option -g status-style       ""
set-option -g status-fg          white
set-option -g status-bg          black
set-option -g status-left-style  ""
set-option -g status-left-length 40
set-option -g status-left        "#[fg=green][#S] #[fg=yellow]W: #I #[fg=cyan]P: #P#{?pane_synchronized, @,} #{?client_prefix,\#, }"
set-option -g status-right-style ""
set-option -g status-right       "#[fg=cyan]%a %b %-d, %Y %R"

set-window-option -g window-status-fg           cyan
set-window-option -g window-status-bg           default
set-window-option -g window-status-attr         dim
set-window-option -g window-status-current-fg   white
set-window-option -g window-status-current-bg   red
set-window-option -g window-status-current-attr bright

set-option -g pane-border-fg        green
set-option -g pane-border-bg        black
set-option -g pane-active-border-fg white
set-option -g pane-active-border-bg blue

set-option -g message-fg white
set-option -g message-bg black

################################################################################
# KEY BINDINGS
################################################################################
unbind-key -a -T prefix

set-option -g prefix C-z
bind-key C-z last-window

bind-key a set-option -g prefix C-a \; bind-key C-a last-window \; unbind-key C-z \; display-message "Set prefix to C-a!"
bind-key A set-option -g prefix C-z \; bind-key C-z last-window \; unbind-key C-a \; display-message "Set prefix to C-z!"

bind-key z set-option status
bind-key Z set-window-option synchronize-panes

bind-key R source-file ~/.tmux.conf \; display-message "Reloaded ~/.tmux.conf!"

bind-key 0   clear-history \; display-message "Cleared history!"
bind-key C-r send-keys -R \; send-keys Enter \; display-message "Reset terminal!"

bind-key -r u select-layout -n
bind-key -r U select-layout -p

bind-key C-q confirm-before -p "kill-server? (y/n)"       kill-server
bind-key C-s confirm-before -p "kill-session #S? (y/n)"   kill-session
bind-key C-w confirm-before -p "kill-window #I:#W? (y/n)" kill-window
bind-key C-x confirm-before -p "kill-pane #P:#T? (y/n)"   kill-pane

bind-key q choose-window  -F 'kill-window?  #I:#W#F  "#T"' "kill-window -t '%%'"
bind-key Q choose-session -F " kill-session?  #S: #{session_windows} windows #{?session_attached,(attached),}" "kill-session -t '%%'"

bind-key s choose-tree
bind-key . command-prompt -I "#S" "rename-session '%%'"

bind-key "'" switch-client -l
bind-key C-p switch-client -p
bind-key C-n switch-client -n
bind-key C-f command-prompt -p "find session:" "switch-client -t '%%'"

bind-key r set-option -g status-style "" \; set-option -g status-left-style "" \; set-option -g status-right-style "" \; refresh-client
bind-key d detach-client
bind-key D choose-client

bind-key c new-window
bind-key C new-window -c "#{pane_current_path}"

bind-key \ split-window -h
bind-key - split-window -v
bind-key | split-window -h -c "#{pane_current_path}"
bind-key _ split-window -v -c "#{pane_current_path}"
bind-key C-_ command-prompt -p "(split-window -v):" "split-window -v -d '%%'"
bind-key C-\ command-prompt -p "(split-window -h):" "split-window -h -d '%%'"

bind-key w choose-window
bind-key W choose-tree -u
bind-key , command-prompt -I "#W" "rename-window '%%'"

bind-key / last-window

bind-key 1 select-window -t :1
bind-key 2 select-window -t :2
bind-key 3 select-window -t :3
bind-key 4 select-window -t :4
bind-key 5 select-window -t :5
bind-key 6 select-window -t :6
bind-key 7 select-window -t :7
bind-key 8 select-window -t :8
bind-key 9 select-window -t :9

bind-key -r f   command-prompt -p "find window:" "select-window -t '%%'"
bind-key -r F   command-prompt -p "(find-window -NT):" "find-window -NT '%%'"
bind-key -r p   previous-window
bind-key -r n   next-window
bind-key -r C-h previous-window
bind-key -r C-l next-window

bind-key -r P swap-window -t :-
bind-key -r N swap-window -t :+

bind-key -r o rotate-window -U
bind-key -r O rotate-window -D

bind-key -r \; last-pane

bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R

bind-key -r H resize-pane -L 5
bind-key -r J resize-pane -D 5
bind-key -r K resize-pane -U 5
bind-key -r L resize-pane -R 5

bind-key Enter resize-pane -Z

bind-key { swap-pane -U
bind-key } swap-pane -D

bind-key C-k confirm-before -p "break-pane? (y/n)" break-pane
bind-key C-j choose-window "join-pane -t '%%'"

bind-key i display-panes
bind-key I show-messages

bind-key : command-prompt -p "tmux:"
bind-key ? list-keys

bind-key m command-prompt -p "(split-window) command:" -I "man " "split-window '%%'"
bind-key M command-prompt -p "(new-window) command:"   -I "man " "new-window -n '%1' '%%'"

bind-key ` new-window -n top top
if-shell 'which htop' 'bind-key ` new-window -n htop htop'

bind-key "~" command-prompt -p "(new-window) w3m:" "new-window -n w3m 'w3m %%'"

bind-key t new-window -c "#{pane_current_path}" -n tig "tig status"
bind-key T new-window -c "#{pane_current_path}" -n tig "tig"

bind-key g run-shell -b "cd #{pane_current_path}; git gui"
bind-key G run-shell -b "cd #{pane_current_path}; gitk"

bind-key b choose-buffer "show-buffer -b '%%'"
bind-key B choose-buffer "paste-buffer -b '%%'"
bind-key = choose-buffer "paste-buffer -b '%%'"
bind-key -r C-b delete-buffer

bind-key Y pipe-pane -o 'cat >> ~/.tmux/logs/%F_#S_#I:#W:#P.out'\; display-message "Toggled logging to ~/.tmux/logs/%F_#S_#I:#W:#P.out!"
bind-key > command-prompt -p "capture all lines in pane:" -I "~/.tmux/logs/%F_%s_#S_#I:#W:#P.log" "capture-pane -S - -E - ; save-buffer %%"
bind-key < command-prompt -p "capture visible lines in pane:" -I "~/.tmux/logs/%F_%s_#S_#I:#W:#P.log" "capture-pane ; save-buffer %%"

bind-key C-u capture-pane -S - -E - \; split-window "tmux save-buffer - | urlview"

bind-key Escape copy-mode

bind-key [ copy-mode
bind-key ] paste-buffer

bind-key y copy-mode
bind-key v paste-buffer

# bind-key -T root MouseDown1Pane   select-pane -t= \; send-keys -M
# bind-key -T root MouseDown1Status select-window -t=
# bind-key -T root MouseDown3Pane   select-pane -mt=
# bind-key -T root MouseDrag1Pane   if-shell -Ft= "#{mouse_any_flag}" 'if -Ft= "#{pane_in_mode}" "copy-mode -M" "send-keys -M"' "copy-mode -M"
# bind-key -T root MouseDrag1Border resize-pane -M
bind-key -T root WheelUpPane      if-shell -Ft= "#{?pane_in_mode,1,#{alternate_on}}" "send-keys -M" "copy-mode -e"

bind-key C-c run-shell "tmux save-buffer - | xsel -i -b"
bind-key C-v run-shell "tmux set-buffer \"$(xsel -o -b)\"; tmux paste-buffer"

bind-key -t vi-copy v   begin-selection
bind-key -t vi-copy y   copy-pipe "xsel -i -b"
bind-key -t vi-copy Y   copy-pipe "xsel -i -b"
bind-key -t vi-copy r   rectangle-toggle
bind-key -t vi-copy C-v rectangle-toggle

bind-key -t vi-choice o   choose
bind-key -t vi-choice h   tree-collapse
bind-key -t vi-choice l   tree-expand
bind-key -t vi-choice C-h tree-collapse-all
bind-key -t vi-choice C-l tree-expand-all

bind-key -t vi-edit C-p history-up
bind-key -t vi-edit C-n history-down
bind-key -t vi-edit C-a start-of-line
bind-key -t vi-edit C-e end-of-line
bind-key -t vi-edit C-b cursor-left
bind-key -t vi-edit C-f cursor-right
bind-key -t vi-edit C-v paste
bind-key -t vi-edit C-d delete-line
bind-key -t vi-edit C-k delete-end-of-line

################################################################################
# MAC OS X SETTINGS AND KEY BINDINGS
################################################################################
if-shell 'test "$(uname)" = "Darwin"' ' \
  set-option -g default-command "reattach-to-user-namespace -l $SHELL"                                     ; \
  bind-key g run-shell -b "cd #{pane_current_path}; reattach-to-user-namespace git gui"                    ; \
  bind-key G run-shell -b "cd #{pane_current_path}; reattach-to-user-namespace gitk"                       ; \
  bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"                                      ; \
  bind-key -t vi-copy Y copy-pipe "reattach-to-user-namespace pbcopy"                                      ; \
  bind-key C-c run-shell "tmux save-buffer - | reattach-to-user-namespace pbcopy"                          ; \
  bind-key C-v run-shell "tmux set-buffer \"$(reattach-to-user-namespace pbpaste)\"; tmux paste-buffer"    ; \
'

################################################################################
# christoomey/vim-tmux-navigator
################################################################################
IS_VIM='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?x?)(diff)?$"'
bind -n M-h if-shell "$IS_VIM" "send-keys M-h"  "select-pane -L"
bind -n M-j if-shell "$IS_VIM" "send-keys M-j"  "select-pane -D"
bind -n M-k if-shell "$IS_VIM" "send-keys M-k"  "select-pane -U"
bind -n M-l if-shell "$IS_VIM" "send-keys M-l"  "select-pane -R"
bind -n M-\ if-shell "$IS_VIM" "send-keys M-\\" "select-pane -l"
